{"version":3,"sources":["index.js","Forex.js"],"names":["ForexApp","document","querySelector","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","currencyList","setCurrencies","_useState3","_useState4","rates","setRates","_useState5","Date","_useState6","selectDate","setSelectDate","_useState7","_useState8","baseCurrency","setBaseCurrency","_useState9","_useState10","targetCurrency","setTargetCurrency","_useState11","_useState12","input","setInput","_useState13","_useState14","output","setOutput","useEffect","getAPIData","calculate","formatDate","date","toISOString","split","endDate","endDateFormat","startDate","setMonth","getMonth","startDateFormat","URL","concat","axios","get","then","_ref","data","keys","values","result","testTime","toString","timeCheck","map","key","filter","time","length","Number","toFixed","className","src","alt","es","selected","onChange","maxDate","htmlFor","e","target","value","name","id","currency","onClick","preventDefault","type","readOnly"],"mappings":"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","file":"static/js/main.504101c3.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport {Forex} from './Forex';\n\nconst ForexApp = document.querySelector('#app-root')\nrender(<Forex />, ForexApp);\n","import React , { useState, useEffect } from 'react'\nimport DatePicker from \"react-datepicker\";\nimport axios from 'axios'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport const Forex = () => {\n\n  const [currencyList, setCurrencies] = useState(['']);\n  const [rates, setRates] = useState([]);\n  const [selectDate, setSelectDate] = useState(new Date());\n  const [baseCurrency, setBaseCurrency] = useState('CAD');\n  const [targetCurrency, setTargetCurrency] = useState('CAD');\n  const [input, setInput] = useState('1');\n  const [output, setOutput] = useState(0);\n\n  useEffect(() => {\n    getAPIData()\n  }, [baseCurrency, selectDate]);\n\n  useEffect(() => {\n    calculate()\n  }, [baseCurrency, targetCurrency, input, selectDate]);\n\n  const formatDate = (date) => {\n    const formatType = new Date(date)\n    return formatType.toISOString().split('T')[0]\n  }\n\n  const getAPIData = () => {\n    let endDate = new Date(selectDate);\n    let endDateFormat = formatDate(endDate)\n    let startDate = endDate.setMonth(endDate.getMonth() - 12)\n    let startDateFormat = formatDate(startDate)\n    const URL = `https://api.exchangeratesapi.io/history?start_at=${startDateFormat}&end_at=${endDateFormat}&base=${baseCurrency}`;\n    axios\n      .get(URL)\n      .then(({ data }) => {\n        setRates(data.rates)\n        if (currencyList == \"\"){\n          setCurrencies(Object.keys(Object.values(data.rates)[0]))\n        }\n      })\n  }\n\n  const calculate = () => {\n    let result = \"\"\n    if (baseCurrency === targetCurrency) result=\"Same currency.\"\n    else {\n      let testTime = formatDate(selectDate).toString()\n      let timeCheck = Object.keys(rates)\n                      .map((key) => key)\n                      .filter((time) => time === testTime )\n                      .length\n      if (timeCheck >= 1) result = (Number(rates[testTime][targetCurrency]) * Number(input)).toFixed(2)\n      else if ( timeCheck === 0 || timeCheck >= 2) result = \"No data available.\"\n      else result = \"Something is wrong..\"\n    }\n    setOutput(result)\n  }\n\n  const currencySwap = e => {\n    e.preventDefault()\n    //deCompletat\n  }\n\n  return (\n    <div className = \"Forex-body\" >\n      <div className = \"Header\" >\n        <h2 className = \"Title\" > FOREX </h2>\n        <img src = \"../favicon.ico\" alt=\"Logo\" />\n      </div> \n      <form>\n        <DatePicker\n          className = \"PickDate\"\n          selected = {selectDate}\n          onChange = {(date) => setSelectDate(date) }\n          maxDate = {new Date()}\n        />\n        <label htmlFor = \"baseCurrencySelect\" \n          className = \"Label\"> From </label>\n        <select\n          onChange = {e => setBaseCurrency(e.target.value)}\n          name = \"baseCurrencySelect\"\n          id = \"baseCurrencySelect\">\n          {currencyList && currencyList.map(currency => {\n            return <option \n                    value = {currency} \n                    key = {currency} \n                    id = {currency}>\n                    {currency}\n                    </option>\n          })}\n        </select>\n        <button onClick = {currencySwap}> Swap </button>\n        <label htmlFor = \"baseCurrency\" \n          className = \"Label\"> To </label>\n        <select\n          onChange = {e => setTargetCurrency(e.target.value)}\n          name = \"targetCurrencySelect\" \n          id = \"targetCurrencySelect\">\n          {currencyList && currencyList.map(currency => {\n            return <option value={currency} \n                    key = {currency} \n                    id = {currency}>\n                    {currency}\n                    </option>\n          })}\n        </select>\n        <label htmlFor = \"input\" \n          className = \"Label\"> Amount </label>\n        <input \n          type = \"text\"\n          id = \"input\"\n          onChange = {e => setInput(e.target.value)} \n          value = {input}/>\n        <label htmlFor = \"result\" \n          className = \"Label\"> Result </label>\n        <input \n          type = \"text\"\n          id = \"result\"\n          readOnly = \"readOnly\"\n          value = {output}/>\n      </form>\n    </div>\n  )\n}\n"],"sourceRoot":""}